# Classes for Stack and Queue data structures
class Stack:
    def __init__(self):
        self.items = []
    
    def push(self, item):
        self.items.append(item)
    
    def pop(self):
        if not self.is_empty():
            return self.items.pop()
        return None
    
    def is_empty(self):
        return len(self.items) == 0
    
    def peek(self):
        if not self.is_empty():
            return self.items[-1]
        return None

class Queue:
    def __init__(self):
        self.items = []
    
    def enqueue(self, item):
        self.items.append(item)
    
    def dequeue(self):
        if not self.is_empty():
            return self.items.pop(0)
        return None
    
    def is_empty(self):
        return len(self.items) == 0
    
    def display(self):
        return self.items

# Class to represent a Citizen
class Citizen:
    def __init__(self, name, procedure):
        self.name = name
        self.procedure = procedure
        self.history = Stack()  # Stack for individual procedure history
    
    def add_to_history(self, procedure):
        self.history.push(procedure)
    
    def get_history(self):
        history = []
        temp_stack = Stack()
        
        # Copy history to temporary stack to preserve order
        while not self.history.is_empty():
            item = self.history.pop()
            history.append(item)
            temp_stack.push(item)
        
        # Restore history to original stack
        while not temp_stack.is_empty():
            self.history.push(temp_stack.pop())
        
        return history[::-1]  # Return reversed for chronological order

# Class to manage the Municipality system
class Municipality:
    def __init__(self):
        self.waiting_queue = Queue()
        self.citizens = {}  # Dictionary to store citizen objects
        self.completed_procedures = []  # Lista de tr√°mites completados

    def add_citizen(self, name, procedure):
        citizen = Citizen(name, procedure)
        self.waiting_queue.enqueue(citizen)
        if name not in self.citizens:
            self.citizens[name] = citizen
    
    def process_next(self):
        citizen = self.waiting_queue.dequeue()
        if citizen:
            citizen.add_to_history(citizen.procedure)
            self.completed_procedures.append((citizen.name, citizen.procedure))  # Registro 
            return f"Processed: {citizen.name} - {citizen.procedure}"
        return "No citizens in queue."

    def display_queue(self):
        queue = self.waiting_queue.display()
        if not queue:
            return "Queue is empty."
        return [f"{citizen.name} - {citizen.procedure}" for citizen in queue]
    
    def get_citizen_history(self, name):
        if name in self.citizens:
            history = self.citizens[name].get_history()
            if not history:
                return f"No history for {name}."
            return [f"{i+1}. {proc}" for i, proc in enumerate(history)]
        return f"Citizen {name} not found."

# Main program to simulate the municipality system
def main():
    municipality = Municipality()
    
    while True:
        print("\nMunicipality Procedure Management System")
        print("1. Add citizen to queue")
        print("2. Process next citizen")
        print("3. Display waiting queue")
        print("4. View citizen's procedure history")
        print("5. Exit")
        print("6. View all completed procedures")

        
        choice = input("Select an option (1-5): ")
        
        if choice == "1":
            name = input("Enter citizen's name: ")
            procedure = input("Enter procedure (e.g., Birth Certificate, Building Permit): ")
            municipality.add_citizen(name, procedure)
            print(f"{name} added to queue with procedure: {procedure}")
        
        elif choice == "2":
            result = municipality.process_next()
            print(result)
        
        elif choice == "3":
            queue = municipality.display_queue()
            print("Waiting Queue:")
            if isinstance(queue, str):
                print(queue)
            else:
                for item in queue:
                    print(item)
        
        elif choice == "4":
            name = input("Enter citizen's name to view history: ")
            history = municipality.get_citizen_history(name)
            print(f"History for {name}:")
            if isinstance(history, str):
                print(history)
            else:
                for item in history:
                    print(item)
        
        elif choice == "5":
            print("Exiting system.")
            break

        elif choice == "6":
            print("Completed Procedures:")
            if not municipality.completed_procedures:
            print("No procedures completed yet.")
            else:
            for i, (name, proc) in enumerate(municipality.completed_procedures, 1):
            print(f"{i}. {name} - {proc}")

        
        else:
            print("Invalid option. Please try again.")

if __name__ == "__main__":
    main()
